package br.com.caelum.leilao.servico;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import br.com.caelum.leilao.dominio.Lance;
import br.com.caelum.leilao.dominio.Leilao;
import br.com.caelum.leilao.dominio.Usuario;

public class AvaliadorTest {
	
	
	
	private Avaliador leiloeiro;
	private Usuario joao;
	private Usuario jose;
	private Usuario maria;
	private Usuario paulo;
	private Usuario pedro;
	
	@Before
	public void setUp(){
		System.out.println("inicializando teste!");
		leiloeiro = new Avaliador();
		joao = new Usuario("Joao");
		jose = new Usuario("Jos√©");
		maria = new Usuario("Maria");
		paulo = new Usuario("M2");
		pedro = new Usuario("M3");	
	}

	@After
	public void finaliza() {
	  System.out.println("fim");
	}
	
	@Test
	public void deveEntenderLeilaoComApenasUmLance(){
		
		Leilao leilao = new Leilao("Honda biz");
		
		leilao.propoe(new Lance(joao, 200.0));
		
		
		leiloeiro.avalia(leilao);
		
		double maiorEsperado = 200;
		double menorEsperado = 200;
		
		assertEquals(maiorEsperado, leiloeiro.getMaiorLance(), 0.00001);
		assertEquals(menorEsperado, leiloeiro.getMenorLance(), 0.00001);
	}
	
	@Test
	public void deveEntenderLancesEmOrdemAleatoria() {
		// cenario: 3 lances em ordem crescente
		
		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(jose,200.0));
		leilao.propoe(new Lance(maria,450.0));
		leilao.propoe(new Lance(joao,120.0));
		leilao.propoe(new Lance(jose,700.0));
		leilao.propoe(new Lance(jose,630.0));
		leilao.propoe(new Lance(maria,230.0));
		

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		// comparando a saida com o esperado
		double maiorEsperado = 700;
		double menorEsperado = 120;

		assertEquals(maiorEsperado, leiloeiro.getMaiorLance(), 0.0001);
		assertEquals(menorEsperado, leiloeiro.getMenorLance(), 0.0001);
	}
	
	@Test
	public void deveEntenderLancesEmOrdemDecrescente() {
		// cenario: 3 lances em ordem crescente
			

		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(maria,400.0));
		leilao.propoe(new Lance(jose,300.0));
		leilao.propoe(new Lance(joao,200.0));
		leilao.propoe(new Lance(jose,100.0));
		

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		// comparando a saida com o esperado
		double maiorEsperado = 400;
		double menorEsperado = 100;

		assertEquals(maiorEsperado, leiloeiro.getMaiorLance(), 0.0001);
		assertEquals(menorEsperado, leiloeiro.getMenorLance(), 0.0001);
	}

	@Test
	public void deveEntenderLancesEmOrdemCrescente() {
		// cenario: 3 lances em ordem crescente
		
		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(maria,100.0));
		leilao.propoe(new Lance(jose,250.0));
		leilao.propoe(new Lance(joao,300.0));
		leilao.propoe(new Lance(jose,400.0));
		

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		// comparando a saida com o esperado
		double maiorEsperado = 400;
		double menorEsperado = 100;

		assertEquals(maiorEsperado, leiloeiro.getMaiorLance(), 0.0001);
		assertEquals(menorEsperado, leiloeiro.getMenorLance(), 0.0001);
	}
	
	@Test
	public void deveDevolverValorMedioDosLances() {
		// cenario: 3 lances em ordem crescente
			

		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(maria,250.0));
		leilao.propoe(new Lance(joao,300.0));
		leilao.propoe(new Lance(jose,400.0));
		leilao.propoe(new Lance(paulo,310.0));
		leilao.propoe(new Lance(pedro,120.0));
		

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		// comparando a saida com o esperado
		double mediaEsperada = 276;

		assertEquals(mediaEsperada, leiloeiro.getMedia(), 0.0001);
		
	}
	
	@Test
	public void deveEncontrarTresMaioresCom5Lances(){
				
		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(maria,100.0));
		leilao.propoe(new Lance(jose,250.0));
		leilao.propoe(new Lance(joao,300.0));
		leilao.propoe(new Lance(jose,400.0));
		leilao.propoe(new Lance(joao,600.0));

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		List<Lance> laces3Maiores = new ArrayList<Lance>();
		laces3Maiores.add(new Lance(joao,600.0));
		laces3Maiores.add(new Lance(jose,400.0));
		laces3Maiores.add(new Lance(joao,300.0));

		assertEquals(laces3Maiores, leiloeiro.getTresMaiores());
	}
	
	@Test
	public void deveEncontrarTresMaioresCom2Lances(){
		
		Leilao leilao = new Leilao("Playstation 3 Novo");

		leilao.propoe(new Lance(jose,400.0));
		leilao.propoe(new Lance(joao,600.0));

		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		List<Lance> laces3Maiores = new ArrayList<Lance>();
		laces3Maiores.add(new Lance(joao,600.0));
		laces3Maiores.add(new Lance(jose,400.0));
		
		assertEquals(laces3Maiores, leiloeiro.getTresMaiores());
	}
	
	@Test
	public void deveEncontrarTresMaioresVazio(){
		
		Leilao leilao = new Leilao("Playstation 3 Novo");

		
		// executando a acao
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		List<Lance> laces3Maiores = new ArrayList<Lance>();
		
		assertEquals(laces3Maiores, leiloeiro.getTresMaiores());
	}
	
	
}
